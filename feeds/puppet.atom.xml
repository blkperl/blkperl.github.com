<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>puppet resource blog author=blkperl</title><link href="http://blkperl.github.com/" rel="alternate"></link><link href="http://blkperl.github.com/feeds/puppet.atom.xml" rel="self"></link><id>http://blkperl.github.com/</id><updated>2014-04-17T00:13:00-07:00</updated><entry><title>Building DevOps Dashboards with Puppet</title><link href="http://blkperl.github.com/building_devops_dashboards_with_puppet.html" rel="alternate"></link><updated>2014-04-17T00:13:00-07:00</updated><author><name>William Van Hevelingen</name></author><id>tag:blkperl.github.com,2014-04-17:building_devops_dashboards_with_puppet.html</id><summary type="html">&lt;p&gt;Graphite is awesome. The variety of metrics that you can put in it and the ability to build graphs to visualize specific things is an invaluable tool. However, most of the time, I just want to be able to do a quick glance at a few key things on a server like CPU usage, memory usage, disk I/O, and network traffic. While it's easy to bring these graphs up individually, in the default Graphite web UI, it's a bit harder to flip through several different server metrics quickly. Not to mention getting them in the particular way you want to view them.&lt;/p&gt;
&lt;p&gt;At this point, you want to build a DevOps dashboard and there's a ton of choices to choose from that goes way beyond the capabilities of the default Graphite web UI. Although, you still end up with the problem of building a dashboard for each host and I have 200+ nodes. Sure, I could write a script to do it but why repeat myself when Puppet could do this for me.&lt;/p&gt;
&lt;p&gt;I just needed to find a Graphite dashboard that I could easily model in Puppet via config files. Originally, I looked at Gdash by @ripienaar. It implements a simple DSL for Graphite that I could have easily modeled in Puppet templates but I just so happened upon the following tweet.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;New GDash inspired dashboard for Graphite &lt;a href="http://t.co/8AJEZX1Jvl"&gt;http://t.co/8AJEZX1Jvl&lt;/a&gt; from &lt;a href="https://twitter.com/juliendehee"&gt;@juliendehee&lt;/a&gt;&lt;/p&gt;&amp;mdash; R.I.Pienaar (@ripienaar) &lt;a href="https://twitter.com/ripienaar/statuses/423934247750365184"&gt;January 16, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;@juliendehee's Leonardo dashboard for Graphite is a simple Python Flask app that hits the Graphite render API to generate graphs. Instead of a DSL language like GDash it uses YAML files. At this point, I was positive someone had already written a Puppet type for YAML. So, I went looking on the Puppet Forge and sure enough Reid had already done the work for me.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://forge.puppetlabs.com/reidmv/yamlfile"&gt;https://forge.puppetlabs.com/reidmv/yamlfile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A few hours of hacking later and I had a Puppet module for Leonardo. It works exactly like the Nagios host/service pattern using exported resources.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Your Puppet Masters need to be using PuppetDB.&lt;/li&gt;
&lt;li&gt;You need to install a recent version of Puppet (&amp;gt;= 3.4.x) with Future parser enabled&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;To get started you need to add the leonardo module to your Puppet masters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;puppet&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pdxcat&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;leonardo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or you can download it directly from &lt;a href="https://github.com/pdxcat/puppet-module-leonardo"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Leonardo server configuration&lt;/h2&gt;
&lt;p&gt;Next, you will want to install Leonardo on a webserver. Below, you can see my &lt;code&gt;role::leonardo&lt;/code&gt; puppet class. Include this class in your leonardo servers node definition. The leonardo class installs the packages needed for Leonardo, does some basic configuration and does a git clone of the source code from GitHub [1]. You can choose to omit the Leonardo class if you want to do it differently. Also since web server configuration is usually environment specific, I'm going to omit it from this blog post but here is an example for setting it up with Apache in the &lt;code&gt;test/init.pp&lt;/code&gt; file using the puppetlabs/apache module [2].&lt;/p&gt;
&lt;p&gt;The key lines to understand in this code snippet is the "mothership" operators also called exported resource collectors [3]. Lines 15-17 will collect all the leonardo resources that we are going to export on our target nodes. Then whenever the leonardo server checks in with Puppet it will ensure that all leonardo resources are created.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/10956900.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;class role::leonardo {

  $template_dir = '/opt/leonardo/leonardo/graphs'

  class { '::leonardo':
    graphite_url =&gt; 'https://graphite.example.org',
    template_dir =&gt; $template_dir,
    install_dir  =&gt; '/opt/leonardo/leonardo',
  }-&gt;
  file { [$template_dir, "${template_dir}/servers"]:
    ensure =&gt; directory,
  }

  # Environment tag can be removed when environment support is added to PuppetDB
  File                &lt;&lt;| tag == "env_leonardo_${::environment}" |&gt;&gt; {}
  Leonardo::Dashboard &lt;&lt;| tag == "env_leonardo_${::environment}" |&gt;&gt; {}
  Leonardo::Graph     &lt;&lt;| tag == "env_leonardo_${::environment}" |&gt;&gt; {}
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;h2&gt;Leonardo client configuration&lt;/h2&gt;
&lt;p&gt;For the target node configuration we need to export resources. The following code snippet contains an example of &lt;code&gt;role::leonardo::client&lt;/code&gt;. Include the &lt;code&gt;role::leonardo::client&lt;/code&gt; class on every node that you want a dashboard for.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/9826382.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;  $dashboard_root = '/var/www/leonardo/graphs/servers',
  $collectd_name  = regsubst($::fqdn, '\.', '_', 'G'),
  $dashboard_dir  = "${dashboard_root}/${::hostname}",

  # Each dashboard needs a directory to hold the graph files
  @@file { $dashboard_dir:
    ensure =&gt; directory,
    mode   =&gt; '0755',
    tag    =&gt; "env_leonardo_${environment}",
  }

  # Each dashboard needs a a dash.yaml file
  @@leonardo::dashboard { $::hostname:
    target             =&gt; "${dashboard_dir}/dash.yaml",
    name               =&gt; $::hostname,
    description        =&gt; 'System Metrics',
    include_properties =&gt; ['common.yaml'],
    tag                =&gt; "env_${environment}",
    require            =&gt; File[$dashboard_dir],
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;In this particular example, we are exporting a leonardo dashboard file, a directory for each server to hold the graphs, and a CPU graph. Check out the link at the bottom for our current list of graphs that we export on all nodes [4]. It should be a good starting point for getting the more common graphs up and running.&lt;/p&gt;
&lt;h2&gt;Graphs and Profit!&lt;/h2&gt;
&lt;p&gt;After running Puppet on both the target node and the Leonardo server, you should see a servers dropdown menu. Upon selecting a server from the list you should see something similar to the dashboard below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Leonardo Dashboard" src="http://blkperl.github.com/images/leonardo_dashboard.png" /&gt;&lt;/p&gt;
&lt;p&gt;Once you're confident that you have the graphs you want defined in Puppet and have tested on one node. Include the leonardo client class on all your nodes and watch as it creates a dashboard for each server as Puppet nodes start to check in and Puppet runs on your Leonardo server.&lt;/p&gt;
&lt;h2&gt;Role Based Graphs&lt;/h2&gt;
&lt;p&gt;Now that we have a bunch of graphs that should be displayed for each node we can start adding ones for specific roles. Similar to the way you might export Nagios service checks depending on a Puppet class we can do the same with exporting leonardo dashboard resources.&lt;/p&gt;
&lt;p&gt;Let's say we have an OpenVPN role. Normally, we would have have our server configuration, monitoring, and environment specific code defined in this file so adding leonardo resources is a natural extension.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/10961436.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;class role::vpnserver {

  class { 'openvpn::server':
     # environment specific parameters
  }

  class { 'collectd::plugin::openvpn':
    # environment specific parameters
  }

  @@leonardo::graph { "${::hostname}-openvpn":
    target     =&gt; "${dashboard_dir}/90-openvpn.graph",
    parameters =&gt; { 'title'    =&gt; 'OpenVPN connected users',
                    'vtitle'   =&gt; 'Users',
                    'linemode' =&gt; 'connected' },
    fields     =&gt; {
                    'users'   =&gt; { 'data' =&gt; "sumSeries(collectd.${collectd_name}.openvpn*.*)",},
                  },
    tag       =&gt; "env_leonardo_${environment}",
  }

}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;This ability is incredibly powerful because all that metadata that Puppet knows about your infrastructure via puppet classes is now available to help you build automated dashboards. You can take it a step further by exporting Graphs to role-based Dashboards. For example, a custom dashboard for an applications with graphs from the webservers, load balancers, and database servers.&lt;/p&gt;
&lt;h2&gt;Caveats&lt;/h2&gt;
&lt;p&gt;The current implement has a few issues that I'm going to gloss over in this post. Pull requests are welcome to help fix these problems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Removing exported resources from PuppetDB is still a bit of a challenge&lt;/li&gt;
&lt;li&gt;Currently, old dashboards need to be manually removed as a purge parameter has not yet been implemented&lt;/li&gt;
&lt;li&gt;Yamlfile can be really slow on initial runs with a large number of hosts&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;TL;DR I used unreleased Puppet features to make shiny dashboards with very little effort thanks to Graphite, Collectd and Puppet.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.puppetlabs.com/puppet/latest/reference/experiments_future.html"&gt;Puppet Future Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.puppetlabs.com/puppetdb/latest/"&gt;PuppetDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[1] At the time of writing there are no packages for Leonardo available&lt;/li&gt;
&lt;li&gt;[2] &lt;a href="https://github.com/pdxcat/puppet-module-leonardo/blob/master/tests/init.pp"&gt;Installing Leonardo with Apache example puppet manifest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;a href="http://docs.puppetlabs.com/puppet/latest/reference/lang_exported.html#collecting-exported-resources"&gt;Docs on Exported resource collectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[4] &lt;a href="https://gist.github.com/blkperl/10958057"&gt;Full Leonardo client example&lt;/a&gt; (Note: this very much a work in progress)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="puppet"></category><category term="graphite"></category><category term="leonardo"></category><category term="metrics"></category></entry><entry><title>Replacing a Puppet CA Cert</title><link href="http://blkperl.github.com/replace-puppet-ca.html" rel="alternate"></link><updated>2013-03-26T22:50:00-07:00</updated><author><name>William Van Hevelingen</name></author><id>tag:blkperl.github.com,2013-03-26:replace-puppet-ca.html</id><summary type="html">&lt;p&gt;This is more of a story than a tutorial and I make no claims that this is the "correct" way to replace a Puppet CA cert but this is how we did it.&lt;/p&gt;
&lt;p&gt;Our puppet ca cert was going to expire in about 18 hours so we set aside some time when no one else was working on other systems and madly searched the internet for tidbits of information to replace the cert.&lt;/p&gt;
&lt;p&gt;In our environment we have a Puppet CA Server, a puppetmaster, and puppetdb/dashboard server and about 200 nix clients.&lt;/p&gt;
&lt;h2&gt;Prep Work&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Stop all puppet agents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If running the daemon, run &lt;code&gt;service puppet stop&lt;/code&gt; on all the clients&lt;/p&gt;
&lt;p&gt;If running by cron then disable all the puppet crons.&lt;/p&gt;
&lt;p&gt;This is not necessary but it will prevent the clients from spamming logs while you replace the certs. It may also prevent some clients from getting into a weird limbo state.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verify time is correct on all the puppetmasters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the servers are not in sync then the certs generated will not work. I would recommend using NTP if you're not already running it.&lt;/p&gt;
&lt;h2&gt;Generate a new CA Cert&lt;/h2&gt;
&lt;p&gt;On the puppet ca remove the expired cert.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rm -rf /var/lib/puppet/ssl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add any alternate dns names to /etc/puppet/puppet.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dns_alt_names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;puppetca&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;puppetca&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pdx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zeratul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pdx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;zeratul&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Review the puppet.conf docs for other CA settings you may want to set before moving on.&lt;/p&gt;
&lt;h2&gt;Generate a new cert for the CA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;puppet cert --generate zeratul.cat.pdx.edu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Verify the new ca.pem and ca cert look correct.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;openssl x509 -text -noout -in /var/lib/puppet/ssl/certs/ca.pem
openssl x509 -text -noout -in /var/lib/puppet/ssl/certs/zeratul.cat.pdx.edu.pem
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Specifically, the validity field should now be 5 years in the future. You can set the expiration date in puppet.conf before you generate the cert if you want a longer or shorter period.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;openssl x509 -text -noout -in /var/lib/puppet/ssl/certs/ca.pem | grep -i validity -A 2
        Validity
            Not Before: Mar 25 03:20:40 2013 GMT
            Not After : Mar 25 03:20:40 2018 GMT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart apache.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;service apache2 restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Generate a new cert for each puppet master&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# request a new cert on the puppetmaster&lt;/span&gt;
puppet agent --test --dns_alt_names&lt;span class="o"&gt;=&lt;/span&gt;tassadar,tassadar.cat.pdx.edu,puppet,puppet.cat.pdx.edu

&lt;span class="c"&gt;# on the ca server sign the cert&lt;/span&gt;
puppet cert --allow-dns-alt-names sign tassadar.cat.pdx.edu

&lt;span class="c"&gt;# restart apache on the puppet master&lt;/span&gt;
service apache2 restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point your puppet master if configured to be an agent of itself, should be able to run &lt;code&gt;puppet agent --test&lt;/code&gt; with no errors unless you are running puppetdb.&lt;/p&gt;
&lt;h2&gt;Generate a new cert for puppetdb&lt;/h2&gt;
&lt;p&gt;The &lt;a href="http://docs.puppetlabs.com/puppetdb/1.1/maintain_and_tune.html#redo-ssl-setup-after-changing-certificates"&gt;official docs&lt;/a&gt; did not work for us. We had to add some additional steps documented below and we filed a &lt;a href="https://projects.puppetlabs.com/issues/19904"&gt;bug&lt;/a&gt; to update the docs or fix the &lt;code&gt;puppetdb-ssl-setup&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Remove the old puppetdb certs on the puppetdb server&lt;/span&gt;
rm -rf /etc/puppetdb/ssl

&lt;span class="c"&gt;# Generate new puppetdb certs&lt;/span&gt;
puppetdb-ssl-setup

&lt;span class="c"&gt;# restart the service&lt;/span&gt;
service puppetdb restart

&lt;span class="c"&gt;# verify it restarts by watching the log (it may take a few minutes)&lt;/span&gt;
tail -f /var/log/puppetdb/puppetdb.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point if you did everything correct, the puppetmaster should be able to checkin to itself as a client with no errors and be able to download a catalog.&lt;/p&gt;
&lt;h2&gt;Request a cert for dashboard&lt;/h2&gt;
&lt;p&gt;Excerpt from the &lt;a href="http://docs.puppetlabs.com/dashboard/manual/1.2/configuring.html"&gt;official docs&lt;/a&gt; for the 1.2 stable release of dashboard.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# on the dashboard server&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/share/puppet-dashboard
rake cert:request

&lt;span class="c"&gt;# on the ca server&lt;/span&gt;
puppet cert sign dashboard

&lt;span class="c"&gt;# restart apache on the dashboard server&lt;/span&gt;
service apache2 restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Generate new certs for all your clients&lt;/h2&gt;
&lt;p&gt;Note if any clients are offline during the process they will need a new cert generated and signed when they come back online.&lt;/p&gt;
&lt;p&gt;We used a bash for loop that looked something like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cat alltheclients.txt | xargs -P 10 -n 1 -I box ssh -4 box &lt;span class="s1"&gt;&amp;#39;rm -fr /var/lib/puppet/ssl &amp;amp;&amp;amp; puppet agent -t&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key part in this bash one liner is removing &lt;code&gt;/var/lib/puppet/ssl&lt;/code&gt; and requesting a new cert.&lt;/p&gt;
&lt;p&gt;Then on the puppet ca server we signed the new certs&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# For each client sign the new cert&lt;/span&gt;
puppet cert sign client2.cat.pdx.edu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or you can use the &lt;code&gt;--all&lt;/code&gt; flag&lt;/p&gt;
&lt;p&gt;There are some security risks with doing this. Basically for the same reasons on why not to use autosign. Read Brice's &lt;a href="http://www.masterzen.fr/2010/11/14/puppet-ssl-explained/"&gt;blog&lt;/a&gt; for more information about Puppet and SSl.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;puppet cert sign --all
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;This was a really painful process and is poorly documented. A lot of the clients were left in a broken state and needed to be kicked because the original for loop failed (probably because we didn't turn off the agents first). About 3 hours after we begun we had most of the clients working again and we fixed some stragglers the next day.&lt;/p&gt;
&lt;p&gt;If someone has a better/easier process for doing this, please blog about it or submit a pull request to the &lt;a href="http://docs.puppetlabs.com/contribute.html#editing-the-documentation"&gt;official docs&lt;/a&gt;.&lt;/p&gt;</summary><category term="puppet"></category><category term="openssl"></category></entry></feed>